def triangles():
    L = [1]
    while True:
        # 不能使用 yield L，因为内存地址的原因L的值在后面L.append(0)会被修改掉，不是定值
        # 使用L.copy()或L[:]都可以，和L的内存地址都不同
        yield L[:]

        # [1,0] [1,1,0] 
        # 我们可以看出规律的是，每一行的相邻两个元素之和会等于下一行右边的元素，比如1+1=2
        # 每行的首尾元素都是1，从图里面没办法去使用里面的数字进行加法去构建上下行的关系
        # 既然每行首尾元素都是1，里面上下行有加法的规律，那么我们可以在末尾加0构建关系，
        # 毕竟1+0=1,0+1=1，不会影响到首尾的元素
        L.append(0)

        # 里面第二行的首元素就是由第一行的首元素加上第一行的尾元素（因为L.append(0)了,所以相当于加上0）
        # [L[0]+L[-1], L[1]+L[0]]  [L[0]+L[-1], L[1]+L[0], L[2], L[1]]
        L = [L[i] + L[i - 1] for i in range(len(L))]

        # [1+0, 0+1] [1+0, 1+1, 0+1]
        # [1,1] [1,2,1]


# 期待输出:
# [1]
# [1, 1]
# [1, 2, 1]
# [1, 3, 3, 1]
# [1, 4, 6, 4, 1]
# [1, 5, 10, 10, 5, 1]
# [1, 6, 15, 20, 15, 6, 1]
# [1, 7, 21, 35, 35, 21, 7, 1]
# [1, 8, 28, 56, 70, 56, 28, 8, 1]
# [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
n = 0
results = []
for t in triangles():
    results.append(t)
    n = n + 1
    if n == 10:
        break

for t in results:
    print(t)

if results == [
    [1],
    [1, 1],
    [1, 2, 1],
    [1, 3, 3, 1],
    [1, 4, 6, 4, 1],
    [1, 5, 10, 10, 5, 1],
    [1, 6, 15, 20, 15, 6, 1],
    [1, 7, 21, 35, 35, 21, 7, 1],
    [1, 8, 28, 56, 70, 56, 28, 8, 1],
    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
]:
    print('测试通过!')
else:
    print('测试失败!')